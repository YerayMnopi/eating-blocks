/* prettier-ignore-start */

/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file is auto-generated by TanStack Router

// Import Routes

import { Route as rootRoute } from "./routes/__root";
import { Route as RegisterImport } from "./routes/register";
import { Route as AuthedImport } from "./routes/_authed";
import { Route as IndexImport } from "./routes/index";
import { Route as AuthedPlannerImport } from "./routes/_authed/planner";

// Create/Update Routes

const RegisterRoute = RegisterImport.update({
  path: "/register",
  getParentRoute: () => rootRoute,
} as any);

const AuthedRoute = AuthedImport.update({
  id: "/_authed",
  getParentRoute: () => rootRoute,
} as any);

const IndexRoute = IndexImport.update({
  path: "/",
  getParentRoute: () => rootRoute,
} as any);

const AuthedPlannerRoute = AuthedPlannerImport.update({
  path: "/planner",
  getParentRoute: () => AuthedRoute,
} as any);

// Populate the FileRoutesByPath interface

declare module "@tanstack/react-router" {
  interface FileRoutesByPath {
    "/": {
      id: "/";
      path: "/";
      fullPath: "/";
      preLoaderRoute: typeof IndexImport;
      parentRoute: typeof rootRoute;
    };
    "/_authed": {
      id: "/_authed";
      path: "";
      fullPath: "";
      preLoaderRoute: typeof AuthedImport;
      parentRoute: typeof rootRoute;
    };
    "/register": {
      id: "/register";
      path: "/register";
      fullPath: "/register";
      preLoaderRoute: typeof RegisterImport;
      parentRoute: typeof rootRoute;
    };
    "/_authed/planner": {
      id: "/_authed/planner";
      path: "/planner";
      fullPath: "/planner";
      preLoaderRoute: typeof AuthedPlannerImport;
      parentRoute: typeof AuthedImport;
    };
  }
}

// Create and export the route tree

interface AuthedRouteChildren {
  AuthedPlannerRoute: typeof AuthedPlannerRoute;
}

const AuthedRouteChildren: AuthedRouteChildren = {
  AuthedPlannerRoute: AuthedPlannerRoute,
};

const AuthedRouteWithChildren =
  AuthedRoute._addFileChildren(AuthedRouteChildren);

export interface FileRoutesByFullPath {
  "/": typeof IndexRoute;
  "": typeof AuthedRouteWithChildren;
  "/register": typeof RegisterRoute;
  "/planner": typeof AuthedPlannerRoute;
}

export interface FileRoutesByTo {
  "/": typeof IndexRoute;
  "": typeof AuthedRouteWithChildren;
  "/register": typeof RegisterRoute;
  "/planner": typeof AuthedPlannerRoute;
}

export interface FileRoutesById {
  __root__: typeof rootRoute;
  "/": typeof IndexRoute;
  "/_authed": typeof AuthedRouteWithChildren;
  "/register": typeof RegisterRoute;
  "/_authed/planner": typeof AuthedPlannerRoute;
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath;
  fullPaths: "/" | "" | "/register" | "/planner";
  fileRoutesByTo: FileRoutesByTo;
  to: "/" | "" | "/register" | "/planner";
  id: "__root__" | "/" | "/_authed" | "/register" | "/_authed/planner";
  fileRoutesById: FileRoutesById;
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute;
  AuthedRoute: typeof AuthedRouteWithChildren;
  RegisterRoute: typeof RegisterRoute;
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  AuthedRoute: AuthedRouteWithChildren,
  RegisterRoute: RegisterRoute,
};

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>();

/* prettier-ignore-end */

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/_authed",
        "/register"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/_authed": {
      "filePath": "_authed.tsx",
      "children": [
        "/_authed/planner"
      ]
    },
    "/register": {
      "filePath": "register.tsx"
    },
    "/_authed/planner": {
      "filePath": "_authed/planner.tsx",
      "parent": "/_authed"
    }
  }
}
ROUTE_MANIFEST_END */
